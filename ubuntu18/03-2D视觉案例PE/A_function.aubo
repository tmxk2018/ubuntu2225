--自定义函数汇总
-----------------------------------------------
--分割字符串函数
--[[
function string.split(str, delimiter)
    if str == nil or str == '' or delimiter == nil then
        return nil
    end
    local result = {}
    local pattern = "(.-)" .. delimiter
    for match in (str .. delimiter):gmatch(pattern) do
        table.insert(result, match)
    end
    return result
end
]]

function string.split(str, delimiter)
    if str == nil or str == '' or delimiter == nil then
        return nil
    end
    local result = {}
    local pattern = "([^" .. delimiter .. "]+)"  -- 匹配非分隔符的连续字符
    for match in str:gmatch(pattern) do
        table.insert(result, match)
    end
    return result
end

-----------------------------------------------
--连接服务器函数
function ConnectTcpServer(ipStr, portInt)
    local ret = tcp.client.connect(ipStr, portInt)
    if ret then
        print("connect success")
    else
        print("connect false")
    end
end

-----------------------------------------------
--断开服务器函数
function DisconnectTcpServer(ipStr, portInt)
    tcp.client.disconnect(ipStr, portInt)
    print("Disconnected from server.")
end

-----------------------------------------------
--发送数据函数
function Send(ipStr, portInt, dataStr)
    if not tcp.client.is_connected(ipStr, portInt) then
        print("Connecting to server...")
        tcp.client.connect(ipStr, portInt)
        sleep(1)
    end
    if tcp.client.is_connected(ipStr, portInt) then
        tcp.client.send_str_data(ipStr, portInt, dataStr)
        print("Data sent: " .. dataStr)
    else
        print("Failed to connect to server.")
    end
end

-----------------------------------------------
--接收数据函数 
function Recv(ipStr, portInt)
    local recv = ""
    local num = 0
    set_global_variable("V_B_photo", false)
    local table = {}
    while (recv == nil or recv == "" or recv == "NG") do
        recv = tcp.client.recv_str_data(ipStr, portInt)
        sleep(0.2)
        num = num + 1
        if num == 10 then
            tcp.client.connect(ipStr, portInt)
            sleep(0.5)
            local signal = "1"  -- 明确定义 signal
            tcp.client.send_str_data(ipStr, portInt, signal)
            print("Send str: " .. signal)
        end
        if num > 20 then
			popup_message(0, "服务器掉线提示", false)
			--popup_message(1, "服务器掉线警告", true)
			--通过通信的方式将服务器掉线消息传递给plc或调度系统
            break
        end
    end
    if recv then
        print("recv: " .. recv)
        table1 = string.split(recv, ",")
        
	-- 单一表格处理
	if table1 then
		for i, v in ipairs(table1) do
			print("table[" .. i .. "]: " .. tostring(v))
		end
	print("table数据是: " .. table.concat(table1, ","))
	else
		print("分割失败")
	end
	end
	
end

-----------------------------------------------
--获取当前机械臂路点函数
function get_current_point()
    local table_pose = {0, 0, 0}
    local table_ori = {0, 0, 0, 0}
    local table_rpy = {0, 0, 0}
	
    local pose = get_current_waypoint()

	--嵌套表格处理
	if pose then
	
		table_pose[1] = pose.pos.x or 0
		table_pose[2] = pose.pos.y or 0
		table_pose[3] = pose.pos.z or 0
		table_ori[1] = pose.ori.w or 0
		table_ori[2] = pose.ori.x or 0
		table_ori[3] = pose.ori.y or 0
		table_ori[4] = pose.ori.z or 0
		table_rpy = quaternion2rpy(table_ori)
		
		-- 打印位置信息
		print("Position(XYZ): \n" .. table.concat(table_pose, ", "))

		-- 打印姿态信息（四元数）
		print("Orientation(Quaternion): \n" .. table.concat(table_ori, ", "))

		-- 打印欧拉角
		print("Orientation(RPY): \n" .. table.concat(table_rpy, ", "))		
	
	end
end
-----------------------------------------------
-----------------------------------------------
-- 设置目标点函数
function set_var_point(name,joint6)
    local JointDeg = "0,0,0,0,0,0"
    local JointDeg = table.concat(joint6, ",", 1, 6)
    print("current_way_point_Deg: \n" .. JointDeg)
	
    --set_global_variable(name, JointDeg)
	print("set ok")
	--move_joint(joint6,true)
end

--输入关节角，输出位姿，然后添加进入变量
--[[
	pos_tmp = {0,0,0}
	rpy_tmp = {0,0,0}
	ori_tmp = {0,0,0,0}
	tool_pos = {0,0,0}
	tool_ori = rpy2quaternion({0,0,0})
	--逆解工具坐标系在base坐标系下的位置和姿态
	tpN=get_target_pose({pos_tmp[1],pos_tmp[2],pos_tmp[3]}, ori_tmp,false,tool_pos,tool_ori)		

--参考原来的过程和程序吧，没什么其他更好的办法
init_global_move_profile()
    set_end_maxvelc(0.480000)
    set_end_maxacc(1.500000)
    set_relative_offset({get_global_variable("V_D_dx"), get_global_variable("V_D_dy"), 0}, rpy2quaternion({d2r(0), d2r(0), d2r(get_global_variable("V_D_drz"))}))
    
	
	move_line(get_global_variable("V_P_get1"), true)
	move_joint(get_global_variable("V_P_gdd2"), true)
	
	move_line(get_global_variable("Realtime_Waypoint"), true)
	--内置 了 一 个 特 殊 的 实 时 路 点 变 量 , 名称为 :"Realtime_Waypoint".
	get_global_variable("Realtime_Waypoint")
返回值是当前实时路点的关节角{joint1Angle, joint2Angle, joint3Angle, joint4Angle, joint5Angle, joint6Angle}
set_global_variable("VarName",varValue)--支持 bool、int、double 三种类型

-- 给定的函数和参考点位太少！！！

]]


---------------------------------自定义函数，把变量点赋值给示教器程序变量路点---------------------------------------
function set_tp(pname,tp)
	cpstr="0,0,0,0,0,0,0"
	for i=1,6,1 do
		cpstr=cpstr..","..tostring(tp[i])
	end
	print("cwp:"..cpstr)
	set_global_variable(pname,cpstr)
end
